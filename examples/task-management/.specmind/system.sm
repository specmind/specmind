# Task Management System

## Overview

The Task Management System is a microservices-based application that enables users to manage tasks through a web interface. The system consists of three services:

- **web-ui-service**: React-based frontend providing the user interface
- **api-service**: Express.js backend handling task management operations
- **email-service**: Express.js service responsible for email notifications

The system uses PostgreSQL as the primary database and follows a four-layer architecture pattern across all services: data layer, API layer, service layer, and external layer.

## System Architecture

```mermaid
graph TB
    subgraph "Frontend"
        WebUI[web-ui-service<br/>React]
    end

    subgraph "Backend Services"
        API[api-service<br/>Express]
        Email[email-service<br/>Express]
    end

    subgraph "Data Store"
        DB[(PostgreSQL)]
    end

    WebUI -->|HTTP: 6 calls| API
    API -->|HTTP: 2 calls| Email
    API -->|Query| DB

    style DB fill:#4169E1,stroke:#000,stroke-width:2px,color:#fff
```

## Cross-Service Flows

### Task Creation Flow

```mermaid
sequenceDiagram
    participant User
    participant WebUI as web-ui-service
    participant API as api-service
    participant Email as email-service
    participant DB as PostgreSQL

    User->>WebUI: Create Task
    WebUI->>API: POST /api/tasks
    API->>DB: INSERT task
    DB-->>API: Task created
    API->>Email: POST /notifications/send
    Email-->>API: Notification sent
    API-->>WebUI: Task response
    WebUI-->>User: Display task
```

### Task Update Flow

```mermaid
sequenceDiagram
    participant User
    participant WebUI as web-ui-service
    participant API as api-service
    participant DB as PostgreSQL

    User->>WebUI: Update Task
    WebUI->>API: PUT /api/tasks/:id
    API->>DB: UPDATE task
    DB-->>API: Task updated
    API-->>WebUI: Updated task
    WebUI-->>User: Display updated task
```

### Task Retrieval Flow

```mermaid
sequenceDiagram
    participant User
    participant WebUI as web-ui-service
    participant API as api-service
    participant DB as PostgreSQL

    User->>WebUI: View Tasks
    WebUI->>API: GET /api/tasks
    API->>DB: SELECT tasks
    DB-->>API: Tasks data
    API-->>WebUI: Tasks response
    WebUI-->>User: Display tasks
```

## Service: api-service

### Architecture

```mermaid
graph TB
    subgraph "API Layer"
        Router[Router<br/>express.Router]
    end

    subgraph "Service Layer"
        TaskService[TaskService<br/>+createTask#40;data#41;<br/>+updateTask#40;id, data#41;<br/>+deleteTask#40;id#41;<br/>+getTask#40;id#41;<br/>+getAllTasks#40;#41;]
        EmailClient[EmailNotificationClient<br/>+sendNotification#40;to, subject, body#41;<br/>+isConnected#40;#41;]
    end

    subgraph "Data Layer"
        TaskRepo[TaskRepository<br/>+create#40;data#41;<br/>+update#40;id, data#41;<br/>+delete#40;id#41;<br/>+findById#40;id#41;<br/>+findAll#40;#41;]
        DBPool[DatabasePool<br/>+query#40;sql, params#41;<br/>+connect#40;#41;<br/>+disconnect#40;#41;]
    end

    subgraph "External Layer"
        HTTPClient[HTTPClient<br/>+get#40;url, config#41;<br/>+post#40;url, data, config#41;<br/>+put#40;url, data, config#41;<br/>+delete#40;url, config#41;]
    end

    Router --> TaskService
    TaskService --> TaskRepo
    TaskService --> EmailClient
    TaskRepo --> DBPool
    EmailClient --> HTTPClient

    style DBPool fill:#4169E1,stroke:#000,stroke-width:2px,color:#fff
    style HTTPClient fill:#FF6B6B,stroke:#000,stroke-width:2px,color:#fff
```

### Architectural Layers

#### API Layer
- **Router**: Express router handling HTTP endpoints for task operations (GET, POST, PUT, DELETE)

#### Service Layer
- **TaskService**: Core business logic for task management
  - Creates, updates, deletes, and retrieves tasks
  - Coordinates between repository and email notification
- **EmailNotificationClient**: Handles email notifications for task events
  - Sends notifications via external email service
  - Manages connection state

#### Data Layer
- **TaskRepository**: Data access layer for task persistence
  - CRUD operations on tasks
  - Abstracts database interactions
- **DatabasePool**: PostgreSQL connection pool management
  - Query execution
  - Connection lifecycle management

#### External Layer
- **HTTPClient**: HTTP communication with external services
  - Generic HTTP methods (GET, POST, PUT, DELETE)
  - Request configuration support

### Technology Stack

- **Framework**: Express.js
- **Language**: TypeScript
- **Database**: PostgreSQL
- **HTTP Client**: Custom implementation

### Architecture Violations

No violations detected.

## Service: email-service

### Architecture

```mermaid
graph TB
    subgraph "API Layer"
        NotifRouter[NotificationRouter<br/>express.Router]
    end

    subgraph "Service Layer"
        NotifService[NotificationService<br/>+send#40;to, subject, body#41;<br/>+getStatus#40;#41;]
    end

    subgraph "External Layer"
        SMTPClient[SMTPClient<br/>+connect#40;#41;<br/>+disconnect#40;#41;<br/>+sendMail#40;to, subject, body#41;<br/>+isConnected#40;#41;]
    end

    NotifRouter --> NotifService
    NotifService --> SMTPClient

    style SMTPClient fill:#FF6B6B,stroke:#000,stroke-width:2px,color:#fff
```

### Architectural Layers

#### API Layer
- **NotificationRouter**: Express router for notification endpoints
  - POST /notifications/send
  - GET /notifications/status

#### Service Layer
- **NotificationService**: Business logic for notification handling
  - Validates notification requests
  - Manages notification delivery
  - Tracks notification status

#### External Layer
- **SMTPClient**: SMTP protocol client for email delivery
  - Connection management to SMTP servers
  - Email sending functionality
  - Connection state tracking

### Technology Stack

- **Framework**: Express.js
- **Language**: TypeScript
- **Email Protocol**: SMTP

### Architecture Violations

No violations detected.

## Service: web-ui-service

### Architecture

```mermaid
graph TB
    subgraph "API Layer"
        Router[Router<br/>+navigate#40;route#41;<br/>+back#40;#41;<br/>+onRouteChange#40;listener#41;<br/>+getCurrentRoute#40;#41;]
    end

    subgraph "Service Layer"
        TaskUIService[TaskUIService<br/>+createTask#40;data#41;<br/>+updateTask#40;id, data#41;<br/>+deleteTask#40;id#41;<br/>+loadTasks#40;#41;<br/>+loadTask#40;id#41;]
        StateManager[StateManager<br/>+setState#40;key, value#41;<br/>+getState#40;key#41;<br/>+subscribe#40;key, listener#41;<br/>+clear#40;#41;]
    end

    subgraph "External Layer"
        APIClient[APIClient<br/>+get#40;endpoint#41;<br/>+post#40;endpoint, data#41;<br/>+put#40;endpoint, data#41;<br/>+delete#40;endpoint#41;]
    end

    Router --> TaskUIService
    TaskUIService --> StateManager
    TaskUIService --> APIClient

    style APIClient fill:#FF6B6B,stroke:#000,stroke-width:2px,color:#fff
```

### Architectural Layers

#### API Layer
- **Router**: Client-side routing system
  - Navigation between views
  - Route change listeners
  - Browser history integration

#### Service Layer
- **TaskUIService**: UI business logic for task operations
  - Coordinates task CRUD operations
  - Manages UI state updates
  - Handles API communication
- **StateManager**: Client-side state management
  - Centralized state store
  - State subscription system
  - State persistence

#### External Layer
- **APIClient**: HTTP client for backend communication
  - RESTful API calls to api-service
  - Request/response handling
  - Error management

### Technology Stack

- **Framework**: React
- **Language**: TypeScript
- **State Management**: Custom StateManager
- **Routing**: Custom Router

### Architecture Violations

No violations detected.

## Summary

The Task Management System implements a clean microservices architecture with clear separation of concerns across three services. Each service follows a consistent four-layer pattern, promoting maintainability and testability. The system demonstrates good architectural practices with no detected violations, proper use of design patterns, and appropriate technology choices for each service type.
